// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace BlazorLeaflet.Samples.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\zehra\OneDrive\Masaüstü\BlazorLeaflet-master - Kopya\BlazorLeaflet-master\BlazorLeaflet\BlazorLeaflet.Samples\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\zehra\OneDrive\Masaüstü\BlazorLeaflet-master - Kopya\BlazorLeaflet-master\BlazorLeaflet\BlazorLeaflet.Samples\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\zehra\OneDrive\Masaüstü\BlazorLeaflet-master - Kopya\BlazorLeaflet-master\BlazorLeaflet\BlazorLeaflet.Samples\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\zehra\OneDrive\Masaüstü\BlazorLeaflet-master - Kopya\BlazorLeaflet-master\BlazorLeaflet\BlazorLeaflet.Samples\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\zehra\OneDrive\Masaüstü\BlazorLeaflet-master - Kopya\BlazorLeaflet-master\BlazorLeaflet\BlazorLeaflet.Samples\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\zehra\OneDrive\Masaüstü\BlazorLeaflet-master - Kopya\BlazorLeaflet-master\BlazorLeaflet\BlazorLeaflet.Samples\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\zehra\OneDrive\Masaüstü\BlazorLeaflet-master - Kopya\BlazorLeaflet-master\BlazorLeaflet\BlazorLeaflet.Samples\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\zehra\OneDrive\Masaüstü\BlazorLeaflet-master - Kopya\BlazorLeaflet-master\BlazorLeaflet\BlazorLeaflet.Samples\_Imports.razor"
using BlazorLeaflet.Samples;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\zehra\OneDrive\Masaüstü\BlazorLeaflet-master - Kopya\BlazorLeaflet-master\BlazorLeaflet\BlazorLeaflet.Samples\_Imports.razor"
using BlazorLeaflet.Samples.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\zehra\OneDrive\Masaüstü\BlazorLeaflet-master - Kopya\BlazorLeaflet-master\BlazorLeaflet\BlazorLeaflet.Samples\_Imports.razor"
using BlazorLeaflet.Samples.Components;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\zehra\OneDrive\Masaüstü\BlazorLeaflet-master - Kopya\BlazorLeaflet-master\BlazorLeaflet\BlazorLeaflet.Samples\Pages\CargoCrud.razor"
using System.Drawing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\zehra\OneDrive\Masaüstü\BlazorLeaflet-master - Kopya\BlazorLeaflet-master\BlazorLeaflet\BlazorLeaflet.Samples\Pages\CargoCrud.razor"
using BlazorLeaflet.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\zehra\OneDrive\Masaüstü\BlazorLeaflet-master - Kopya\BlazorLeaflet-master\BlazorLeaflet\BlazorLeaflet.Samples\Pages\CargoCrud.razor"
using BlazorLeaflet.Samples.Data;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/cargocrud")]
    public partial class CargoCrud : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 143 "C:\Users\zehra\OneDrive\Masaüstü\BlazorLeaflet-master - Kopya\BlazorLeaflet-master\BlazorLeaflet\BlazorLeaflet.Samples\Pages\CargoCrud.razor"
      
    private Map _map;

    private Circle _circle;

    List<Cargo> Cargos = new List<Cargo>();

    [Parameter]
    public string Id { get; set; }

    Cargo c = new Cargo();
    void clear()
    {
        c.Weight = 0;
        c.Price = 0;
        c.DeliveryCity = "";
        c.Latitude = 0;
        c.Longitude = 0;
    }

    void ShowCargo()
    {
        navigation.NavigateTo("/cargotracking");
    }

    private async Task UpdateMapMarker()
    {
        Cargos = await service.GetCargoAsync();

        string tooltip_;

        if (Cargos.Any())
        {
            foreach (var cargo in Cargos)
            {
                var LatLng = new LatLng(float.Parse(cargo.Latitude.ToString()), float.Parse(cargo.Longitude.ToString()));

                if (cargo.DeliveryCity is null)
                    tooltip_ = " Description not exists .... !!! ";
                else
                    tooltip_ = cargo.DeliveryCity.ToString();

                var marker = new Marker(LatLng)
                {
                    Draggable = true,
                    Title = cargo.DeliveryCity,
                    Popup = new Popup { Content = string.Format("I am at {0:0.00}° lat, {1:0.00}° lng", LatLng.Lat, LatLng.Lng) },
                    Tooltip = new Tooltip { Content = tooltip_ }
                };

                _map.AddLayer(marker);
            }
        }
    }

    private async Task RefreshCargos()
    {
        Cargos = await service.GetCargoAsync();
    }

    public Cargo NewCargo { get; set; } = new Cargo();

    private async Task AddNewCargo()
    {
        await service.AddCargoAsync(NewCargo);
        NewCargo = new Cargo();
        await RefreshCargos();
    }

    Cargo UpdateCargo = new Cargo();

    private void SetCargoForUpdate(Cargo cargo)
    {
        UpdateCargo = cargo;
    }

    private async Task UpdateCargoData()
    {
        await service.UpdateCargoAsync(UpdateCargo);
        await RefreshCargos();
    }

    private async Task DeleteCargo(Cargo cargo)
    {
        await service.DeleteCargoAsync(cargo);
        await RefreshCargos();
    }

    protected override async Task OnInitializedAsync()
    {
        await RefreshCargos();

        _map = new Map(jsRuntime)
        {
            Center = _startAt,
            Zoom = 4.8f
        };

        _map.OnInitialized += () =>
        {
            _map.AddLayer(new TileLayer
            {
                UrlTemplate = "https://a.tile.openstreetmap.org/{z}/{x}/{y}.png",
                Attribution = "&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors",
            });

            _map.AddLayer(new Polygon
            {
                Shape = new[]
                { new[] { new PointF(37f, -109.05f), new PointF(41f, -109.03f), new PointF(41f, -102.05f), new PointF(37f, -102.04f) } },
                Fill = true,
                FillColor = Color.Blue,
                Popup = new Popup
                {
                    Content = "How are you doing,"
                }
            });

            _map.AddLayer(new Models.Rectangle
            {
                Shape = new RectangleF(10f, 0f, 5f, 1f)
            });

            _circle = new Circle
            {
                Position = new LatLng(10f, 5f),
                Radius = 10f
            };
            _map.AddLayer(_circle);
        };
    }

    private LatLng _startAt = new LatLng(39.5574007f, 35.3918687f);
    public string CityName { get; set; }


    private void FindCity()
    {
        _circle.Radius = 5000000f;
        var city = cityService.FindCity(CityName);
        if (city != null)
        {
            var marker = new Marker(city.Coordinates)
            {
                Icon = new Icon
                {
                    Url = city.CoatOfArmsImageUrl,
                    ClassName = "map-icon",
                },
                Tooltip = new Tooltip
                {
                    Content = city.Name,
                },
                Popup = new Popup
                {
                    Content = city.Description,
                }
            };

            _map.AddLayer(marker);
        }
    }

    private void ZoomMap()
    {
        _map.FitBounds(new PointF(45.943f, 24.967f), new PointF(46.943f, 25.967f), maxZoom: 5f);
    }

    private void PanToNY()
    {
        _map.PanTo(new PointF(40.713185f, -74.0072333f), animate: true, duration: 10f);
    }


#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private Microsoft.AspNetCore.Components.NavigationManager navigation { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private BlazorLeaflet.Samples.Data.CargoServices service { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime jsRuntime { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private CityService cityService { get; set; }
    }
}
#pragma warning restore 1591
