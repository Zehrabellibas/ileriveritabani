@page "/cargotracking"

@using System.Drawing
@using BlazorLeaflet.Models
@using BlazorLeaflet.Samples.Data

@inject CityService cityService
@inject IJSRuntime jsRuntime
@inject BlazorLeaflet.Samples.Data.CargoServices service


<h1>CargoTracking</h1>

<div class="text-center p-3 mb-3">
    <button class="btn btn-info btn-lg" @onclick="Show"> Show CARGO-s </button>
</div>

<div id="mapContainer"  style="width: 800px; height: 500px; margin: auto">
    <LeafletMap Map="_map" />
</div>

@code {
    private Map _map;

    private Circle _circle;

    List<Cargo> Cargos = new List<Cargo>();


    private async Task Show()
    {
        Cargos = await service.GetCargoAsync();

        string tooltip_;

        if (Cargos.Any())
        {
            foreach (var cargo in Cargos)
            {
                var LatLng = new LatLng(float.Parse(cargo.Latitude.ToString()), float.Parse(cargo.Longitude.ToString()));

                if (cargo.DeliveryCity is null)
                    tooltip_ = " Description not exists .... !!! ";
                else
                    tooltip_ = cargo.DeliveryCity.ToString();

                var marker = new Marker(LatLng)
                {

                    Draggable = true,
                    Title = cargo.DeliveryCity,
                    Popup = new Popup { Content = string.Format("I am at {0:0.00}° lat, {1:0.00}° lng", LatLng.Lat, LatLng.Lng) },
                    Tooltip = new Tooltip { Content = tooltip_ }

                };

                _map.AddLayer(marker);
            }
        }
    }

    private async Task RefreshCargos()
    {
        Cargos = await service.GetCargoAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        await RefreshCargos();

        _map = new Map(jsRuntime)
        {
            Center = _startAt,
            Zoom = 4.8f
        };

        _map.OnInitialized += () =>
        {
            _map.AddLayer(new TileLayer
            {
                UrlTemplate = "https://a.tile.openstreetmap.org/{z}/{x}/{y}.png",
                Attribution = "&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors",
            });

            _map.AddLayer(new Polygon
            {
                Shape = new[]
                { new[] { new PointF(37f, -109.05f), new PointF(41f, -109.03f), new PointF(41f, -102.05f), new PointF(37f, -102.04f) } },
                Fill = true,
                FillColor = Color.Blue,
                Popup = new Popup
                {
                    Content = "How are you doing,"
                }
            });

            _map.AddLayer(new Models.Rectangle
            {
                Shape = new RectangleF(10f, 0f, 5f, 1f)
            });

            _circle = new Circle
            {
                Position = new LatLng(10f, 5f),
                Radius = 10f
            };
            _map.AddLayer(_circle);
        };
    }

    private LatLng _startAt = new LatLng(39.5574007f, 35.3918687f);
    public string CityName { get; set; }


    private void FindCity()
    {
        _circle.Radius = 5000000f;
        var city = cityService.FindCity(CityName);
        if (city != null)
        {
            var marker = new Marker(city.Coordinates)
            {
                Icon = new Icon
                {
                    Url = city.CoatOfArmsImageUrl,
                    ClassName = "map-icon",
                },
                Tooltip = new Tooltip
                {
                    Content = city.Name,
                },
                Popup = new Popup
                {
                    Content = city.Description,
                }
            };

            _map.AddLayer(marker);
        }
    }

    private void ZoomMap()
    {
        _map.FitBounds(new PointF(45.943f, 24.967f), new PointF(46.943f, 25.967f), maxZoom: 5f);
    }

    private void PanToNY()
    {
        _map.PanTo(new PointF(40.713185f, -74.0072333f), animate: true, duration: 10f);
    }

}
