@page "/cargocrud"

@using System.Drawing
@using BlazorLeaflet.Models
@using BlazorLeaflet.Samples.Data

@inject CityService cityService
@inject IJSRuntime jsRuntime
@inject BlazorLeaflet.Samples.Data.CargoServices service

@inject Microsoft.AspNetCore.Components.NavigationManager navigation

<div class="h1basliklar">
    <h1>CRUD</h1>
</div>

<div class="container">

    <div class="row bg-light">
        <table class="table table-bordered">
            <thead class="thead-dark">
                <tr>
                    <th>Cargo Id</th>
                    <th>Weight</th>
                    <th>Price</th>
                    <th>DeliveryCity</th>
                    <th>Latitude</th>
                    <th>Longitude</th>
                    <th>EDİT</th>
                    <th>DELETE</th>
                </tr>
            </thead>

            <tbody>    
                @if (Cargos.Any()){
                    @foreach (var cargo in Cargos){
                        <tr @onclick="(() => SetCargoForUpdate(cargo))">
                        <td>@cargo.Id</td>
                        <td>@cargo.Weight</td>
                        <td>@cargo.Price</td>
                        <td>@cargo.DeliveryCity</td>
                        <td>@cargo.Latitude</td>
                        <td>@cargo.Longitude</td>
                        <td> <button type="button" class="btn btn-info" @onclick="(() => SetCargoForUpdate(cargo))"> Edit </button> </td>
                        <td> <button type="button" class="btn btn-warning" @onclick="(() => DeleteCargo(cargo))"> Delete </button> </td>
                        </tr>
                     } 
                 }
                 else{
                    <tr><td colspan="6"><strong>No products available</strong></td></tr>}
            </tbody>

        </table>
    </div>

    <div class="row m-5">
        <div class="col-5 bg-light m-2 justify-content-start">
            <div class="p-3 mb-3 bg-primary text-white text-center">Add New Cargo</div>

            <EditForm Model="@NewCargo">
                <div class="form-group">
                    <label for="name">Weight</label>
                    <input type="text" id="name" class="form-control" @bind-value="@NewCargo.Weight" />
                </div>

                <div class="form-group">
                    <label for="price">Price</label>
                    <input type="text" id="price" class="form-control" @bind="@NewCargo.Price" />
                </div>

                <div class="form-group">
                    <label for="quantity">DeliveryCity</label>
                    <input type="text" id="quantity" class="form-control" @bind="@NewCargo.DeliveryCity" />
                </div>

                <div class="form-group">
                    <label for="quantity">Latitude</label>
                    <input type="text" id="quantity" class="form-control" @bind="@NewCargo.Latitude" />
                </div>

                <div class="form-group">
                    <label for="quantity">Longitude</label>
                    <input type="text" id="quantity" class="form-control" @bind="@NewCargo.Longitude" />
                </div>

                <div class="text-center p-3 mb-3">
                    <button class="btn btn-info" @onclick="AddNewCargo"> Add Cargo</button>
                    <button type="reset" class="btn btn-warning" @onclick="clear">Clear a form</button>
                </div>
            </EditForm>
        </div>

        <div class="col-5 bg-light m-2 justify-content-end">
            <div class="p-3 mb-1 bg-primary text-white text-center">Update Cargo</div>

            <EditForm Model="@UpdateCargo">
                <div class="form-group">
                    <label for="name">Weight</label>
                    <input type="text" id="name" class="form-control" @bind-value="@UpdateCargo.Weight" />
                </div>

                <div class="form-group">
                    <label for="price">Price</label>
                    <input type="text" id="price" class="form-control" @bind="@UpdateCargo.Price" />
                </div>

                <div class="form-group">
                    <label for="quantity">DeliveryCity</label>
                    <input type="text" id="quantity" class="form-control" @bind="@UpdateCargo.DeliveryCity" />
                </div>

                <div class="form-group">
                    <label for="quantity">Latitude</label>
                    <input type="text" id="quantity" class="form-control" @bind="@UpdateCargo.Latitude" />
                </div>

                <div class="form-group">
                    <label for="quantity">Longitude</label>
                    <input type="text" id="quantity" class="form-control" @bind="@UpdateCargo.Longitude" />
                </div>
                <div class="text-center p-3 mb-3">
                    <button class="btn btn-info" @onclick="UpdateCargoData"> Update Cargo</button>
                    <button type="reset" class="btn btn-warning" @onclick="clear">Clear a form</button>
                </div>
            </EditForm>
        </div>
    </div>
    
    <div class="text-center p-3 mb-3">
        <input type="submit" value="Show Cargo-s"  @onclick="@ShowCargo" class="btn btn-info btn-lg" />
        <a href="/cargotracking" />
    </div>

    <div class="p-3 mb-3">
        <button class="btn btn-info btn-lg" @onclick="UpdateMapMarker"> Show CARGO-s (This Page)</button>
    </div>

    <div id="mapContainer" style="width: 300px; height: 300px;">
        <LeafletMap Map="_map" />
    </div>
</div>

@code{
    private Map _map;

    private Circle _circle;

    List<Cargo> Cargos = new List<Cargo>();

    [Parameter]
    public string Id { get; set; }

    Cargo c = new Cargo();
    void clear()
    {
        c.Weight = 0;
        c.Price = 0;
        c.DeliveryCity = "";
        c.Latitude = 0;
        c.Longitude = 0;
    }

    void ShowCargo()
    {
        navigation.NavigateTo("/cargotracking");
    }

    private async Task UpdateMapMarker()
    {
        Cargos = await service.GetCargoAsync();

        string tooltip_;

        if (Cargos.Any())
        {
            foreach (var cargo in Cargos)
            {
                var LatLng = new LatLng(float.Parse(cargo.Latitude.ToString()), float.Parse(cargo.Longitude.ToString()));

                if (cargo.DeliveryCity is null)
                    tooltip_ = " Description not exists .... !!! ";
                else
                    tooltip_ = cargo.DeliveryCity.ToString();

                var marker = new Marker(LatLng)
                {
                    Draggable = true,
                    Title = cargo.DeliveryCity,
                    Popup = new Popup { Content = string.Format("I am at {0:0.00}° lat, {1:0.00}° lng", LatLng.Lat, LatLng.Lng) },
                    Tooltip = new Tooltip { Content = tooltip_ }
                };

                _map.AddLayer(marker);
            }
        }
    }

    private async Task RefreshCargos()
    {
        Cargos = await service.GetCargoAsync();
    }

    public Cargo NewCargo { get; set; } = new Cargo();

    private async Task AddNewCargo()
    {
        await service.AddCargoAsync(NewCargo);
        NewCargo = new Cargo();
        await RefreshCargos();
    }

    Cargo UpdateCargo = new Cargo();

    private void SetCargoForUpdate(Cargo cargo)
    {
        UpdateCargo = cargo;
    }

    private async Task UpdateCargoData()
    {
        await service.UpdateCargoAsync(UpdateCargo);
        await RefreshCargos();
    }

    private async Task DeleteCargo(Cargo cargo)
    {
        await service.DeleteCargoAsync(cargo);
        await RefreshCargos();
    }

    protected override async Task OnInitializedAsync()
    {
        await RefreshCargos();

        _map = new Map(jsRuntime)
        {
            Center = _startAt,
            Zoom = 4.8f
        };

        _map.OnInitialized += () =>
        {
            _map.AddLayer(new TileLayer
            {
                UrlTemplate = "https://a.tile.openstreetmap.org/{z}/{x}/{y}.png",
                Attribution = "&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors",
            });

            _map.AddLayer(new Polygon
            {
                Shape = new[]
                { new[] { new PointF(37f, -109.05f), new PointF(41f, -109.03f), new PointF(41f, -102.05f), new PointF(37f, -102.04f) } },
                Fill = true,
                FillColor = Color.Blue,
                Popup = new Popup
                {
                    Content = "How are you doing,"
                }
            });

            _map.AddLayer(new Models.Rectangle
            {
                Shape = new RectangleF(10f, 0f, 5f, 1f)
            });

            _circle = new Circle
            {
                Position = new LatLng(10f, 5f),
                Radius = 10f
            };
            _map.AddLayer(_circle);
        };
    }

    private LatLng _startAt = new LatLng(39.5574007f, 35.3918687f);
    public string CityName { get; set; }


    private void FindCity()
    {
        _circle.Radius = 5000000f;
        var city = cityService.FindCity(CityName);
        if (city != null)
        {
            var marker = new Marker(city.Coordinates)
            {
                Icon = new Icon
                {
                    Url = city.CoatOfArmsImageUrl,
                    ClassName = "map-icon",
                },
                Tooltip = new Tooltip
                {
                    Content = city.Name,
                },
                Popup = new Popup
                {
                    Content = city.Description,
                }
            };

            _map.AddLayer(marker);
        }
    }

    private void ZoomMap()
    {
        _map.FitBounds(new PointF(45.943f, 24.967f), new PointF(46.943f, 25.967f), maxZoom: 5f);
    }

    private void PanToNY()
    {
        _map.PanTo(new PointF(40.713185f, -74.0072333f), animate: true, duration: 10f);
    }

}